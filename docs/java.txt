## 打包部署后端项目

1. 进入人人开源后端项目，执行打包（修改配置文件，更改端口，打包三次生成三个JAR文件）
mvn clean install -Dmaven.test.skip=true

2. 安装Java镜像
docker pull java

3. 创建3节点Java容器
#创建数据卷，上传JAR文件
docker volume create jarlib

#启动容器
docker run -it -d --name j1 -v jarlib:/home/soft --net=host java
#进入j1容器
docker exec -it j1 bash
#启动Java项目
nohup java -Xms128m -Xmx256m -jar /home/soft/renren-fast.jar --server.port=19001>>/home/soft/renren-fast-19001.log 2>&1 &

#启动容器
docker run -it -d --name j2 -v jarlib:/home/soft --net=host java
#进入j1容器
docker exec -it j2 bash
#启动Java项目
nohup java -Xms128m -Xmx256m -jar /home/soft/renren-fast.jar --server.port=19002>>/home/soft/renren-fast-19002.log 2>&1 &

#启动容器
docker run -it -d --name j3 -v jarlib:/home/soft --net=host java
#进入j1容器
docker exec -it j3 bash
#启动Java项目
nohup java -Xms128m -Xmx256m -jar /home/soft/renren-fast.jar --server.port=19003>>/home/soft/renren-fast-19003.log 2>&1 &



4. 安装Nginx镜像
docker pull nginx


5. 创建Nginx容器，配置负载均衡

创建放 nginx.conf 的卷,jn1

nginx.conf配置文件内容如下：

user  nginx;
worker_processes  1;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
   worker_connections  1024;
}

http {
   include       /etc/nginx/mime.types;
   default_type  application/octet-stream;

   log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
					 '$status $body_bytes_sent "$http_referer" '
					 '"$http_user_agent" "$http_x_forwarded_for"';

   access_log  /var/log/nginx/access.log  main;

   sendfile        on;
   #tcp_nopush     on;

   keepalive_timeout  65;

   #gzip  on;

proxy_redirect          off;
proxy_set_header        Host $host;
proxy_set_header        X-Real-IP $remote_addr;
proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
client_max_body_size    10m;
client_body_buffer_size   128k;
proxy_connect_timeout   5s;
proxy_send_timeout      5s;
proxy_read_timeout      5s;
proxy_buffer_size        4k;
proxy_buffers           4 32k;
proxy_busy_buffers_size  64k;
proxy_temp_file_write_size 64k;

upstream getway-renren-fast {
	server 192.168.3.231:19001;
	server 192.168.3.231:19002;
	server 192.168.3.231:19003;
}
server {
	   listen       6001;
	   server_name  192.168.3.231;
	   location / {
		   proxy_pass   http://getway-renren-fast;
		   index  index.html index.htm;
	   }
   }
}

创建第1个Nginx节点
docker run -it -d --name jn1 -v /var/lib/docker/volumes/jn1/_data/nginx.conf:/etc/nginx/nginx.conf --net=host --privileged nginx


创建放 nginx.conf 的卷,jn2
nginx.conf配置文件内容如下：

user  nginx;
worker_processes  1;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
   worker_connections  1024;
}

http {
   include       /etc/nginx/mime.types;
   default_type  application/octet-stream;

   log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
					 '$status $body_bytes_sent "$http_referer" '
					 '"$http_user_agent" "$http_x_forwarded_for"';

   access_log  /var/log/nginx/access.log  main;

   sendfile        on;
   #tcp_nopush     on;

   keepalive_timeout  65;

   #gzip  on;

proxy_redirect          off;
proxy_set_header        Host $host;
proxy_set_header        X-Real-IP $remote_addr;
proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
client_max_body_size    10m;
client_body_buffer_size   128k;
proxy_connect_timeout   5s;
proxy_send_timeout      5s;
proxy_read_timeout      5s;
proxy_buffer_size        4k;
proxy_buffers           4 32k;
proxy_busy_buffers_size  64k;
proxy_temp_file_write_size 64k;

upstream getway-renren-fast {
	server 192.168.3.231:19001;
	server 192.168.3.231:19002;
	server 192.168.3.231:19003;
}
server {
	   listen       6002;
	   server_name  192.168.3.231;
	   location / {
		   proxy_pass   http://getway-renren-fast;
		   index  index.html index.htm;
	   }
   }
}


创建第2个Nginx节点
docker run -it -d --name jn2 -v /var/lib/docker/volumes/jn2/_data/nginx.conf:/etc/nginx/nginx.conf --net=host --privileged nginx


6. 在Nginx容器安装Keepalived

#进入n1节点
docker exec -it jn1 bash
#更新软件包
apt-get update
#安装VIM
apt-get install vim
#安装Keepalived
apt-get install keepalived
#编辑Keepalived配置文件(如下)
vim /etc/keepalived/keepalived.conf
#启动Keepalived
service keepalived start


vrrp_instance VI_1 {
   state MASTER
   interface eth0
   virtual_router_id 55
   priority 100
   advert_int 1
   authentication {
	   auth_type PASS
	   auth_pass jnjn
   }
   virtual_ipaddress {
	   192.168.3.151
   }
}

virtual_server 192.168.3.151 6001 {
   delay_loop 3
   lb_algo rr
   lb_kind NAT
   persistence_timeout 50
   protocol TCP
   real_server 192.168.3.231 6001 {
	   weight 1
   }
}


#进入n2节点
docker exec -it n2 bash
#更新软件包
apt-get update
#安装VIM
apt-get install vim
#安装Keepalived
apt-get install keepalived
#编辑Keepalived配置文件(如下)
vim /etc/keepalived/keepalived.conf
#启动Keepalived
service keepalived start


vrrp_instance VI_1 {
   state MASTER
   interface eth0
   virtual_router_id 55
   priority 100
   advert_int 1
   authentication {
	   auth_type PASS
	   auth_pass jnjn
   }
   virtual_ipaddress {
	   192.168.3.151
   }
}

virtual_server 192.168.3.151 6001 {
   delay_loop 3
   lb_algo rr
   lb_kind NAT
   persistence_timeout 50
   protocol TCP
   real_server 192.168.3.231 6002 {
	   weight 1
   }
}
