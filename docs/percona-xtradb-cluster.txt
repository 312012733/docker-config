1. 安装PXC镜像
docker pull percona/percona-xtradb-cluster

2. 为PXC镜像改名
docker tag percona/percona-xtradb-cluster pxc

3. 创建net1网段
docker network create --subnet 172.18.0.0/16 net1

4. 创建5个数据卷
docker volume create --name pxc1
docker volume create --name pxc2
docker volume create --name pxc3
docker volume create --name pxclog1
docker volume create --name pxclog2
docker volume create --name pxclog3

5. 创建备份数据卷（用于热备份数据）
docker volume create --name backup

6. 创建pxc容器
docker run -d -p 3306:3306 --privileged --name=pxc1 \
-e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=root \
-v pxclog1:/var/log/mysql -v pxc1:/var/lib/mysql -v backup:/data \
--network net1 --ip 172.18.0.2 \
percona/percona-xtradb-cluster

docker run -d -p 3307:3306 --privileged --name=pxc2 \
-e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=root -e CLUSTER_JOIN=pxc1 \
-v pxclog2:/var/log/mysql -v pxc2:/var/lib/mysql -v backup:/data \
--network net1 --ip 172.18.0.3 \
percona/percona-xtradb-cluster

docker run -d -p 3308:3306 --privileged --name=pxc3 \
-e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=root -e CLUSTER_JOIN=pxc1 \
-v pxclog3:/var/log/mysql -v pxc3:/var/lib/mysql -v backup:/data \
--network net1 --ip 172.18.0.4 \
percona/percona-xtradb-cluster

7. 安装Haproxy镜像
docker pull haproxy

注意：添加haproxy.cfg之前，必须先为haproxy在mysql中添加，与mysql心跳检测的用户。
CREATE USER 'haproxy'@'%' IDENTIFIED BY '';

8. 宿主机上编写Haproxy配置文件
vi /home/soft/haproxy.cfg

配置文件如下：

global
#工作目录
chroot /usr/local/etc/haproxy
#日志文件，使用rsyslog服务中local5日志设备（/var/log/local5），等级info
log 127.0.0.1 local5 info
#守护进程运行
daemon

defaults
log	global
mode	http
#日志格式
option	httplog
#日志中不记录负载均衡的心跳检测记录
option	dontlognull
#连接超时（毫秒）
timeout connect 5000
#客户端超时（毫秒）
timeout client  50000
#服务器超时（毫秒）
timeout server  50000

#监控界面
listen  admin_stats
#监控界面的访问的IP和端口
bind  0.0.0.0:8888
#访问协议
mode        http
#URI相对地址
stats uri   /dbs
#统计报告格式
stats realm     Global\ statistics
#登陆帐户信息
stats auth  admin:root
#数据库负载均衡
listen  proxy-mysql
#访问的IP和端口
bind  0.0.0.0:3306
#网络协议
mode  tcp
#负载均衡算法（轮询算法）
#轮询算法：roundrobin
#权重算法：static-rr
#最少连接算法：leastconn
#请求源IP算法：source
balance  roundrobin
#日志格式
option  tcplog
#在MySQL中创建一个没有权限的haproxy用户，密码为空。Haproxy使用这个账户对MySQL数据库心跳检测
#CREATE USER 'haproxy'@'%' IDENTIFIED BY '';
option  mysql-check user haproxy
server  MySQL_1 172.18.0.2:3306 check weight 1 maxconn 2000
server  MySQL_2 172.18.0.3:3306 check weight 1 maxconn 2000
server  MySQL_3 172.18.0.4:3306 check weight 1 maxconn 2000

#使用keepalive检测死链
option  tcpka


9. 创建两个Haproxy容器

#创建第1个Haproxy负载均衡服务器
docker run -it -d -p 4001:8888 -p 4002:3306 --privileged --name h1 \
-v /home/soft/haproxy:/usr/local/etc/haproxy \
--network net1 --ip 172.18.0.7 \
haproxy

#进入h1容器，启动Haproxy
docker exec -it h1 bash
haproxy -f /usr/local/etc/haproxy/haproxy.cfg
   
#创建第2个Haproxy负载均衡服务器
docker run -it -d -p 4003:8888 -p 4004:3306 --privileged --name h2 \
-v /home/soft/haproxy:/usr/local/etc/haproxy \
--network net1 --ip 172.18.0.8 \
haproxy

#进入h2容器，启动Haproxy
docker exec -it h2 bash
haproxy -f /usr/local/etc/haproxy/haproxy.cfg

#dashbord  http://192.168.3.231:4001/dbs


10. Haproxy容器内安装Keepalived，设置虚拟IP

#进入h1容器
docker exec -it h1 bash
#更新软件包
apt-get update
#安装VIM
apt-get install vim
#安装Keepalived
apt-get install keepalived
#编辑Keepalived配置文件（参考下方配置文件）
vim /etc/keepalived/keepalived.conf
#启动Keepalived
service keepalived start
#宿主机执行ping命令
ping 172.18.0.201


配置文件内容如下：

vrrp_instance  VI_1 {
	state  MASTER
	interface  eth0
	virtual_router_id  51
	priority  100
	advert_int  1
	authentication {
		auth_type  PASS
		auth_pass  hapxy
	}
	virtual_ipaddress {
		172.18.0.201
	}
}


#进入h2容器
docker exec -it h2 bash
#更新软件包
apt-get update
#安装VIM
apt-get install vim
#安装Keepalived
apt-get install keepalived
#编辑Keepalived配置文件
vim /etc/keepalived/keepalived.conf
#启动Keepalived
service keepalived start
#宿主机执行ping命令
ping 172.18.0.201

配置文件内容如下：

vrrp_instance  VI_1 {
	state  MASTER
	interface  eth0
	virtual_router_id  51
	priority  100
	advert_int  1
	authentication {
		auth_type  PASS
		auth_pass  hapxy
	}
	virtual_ipaddress {
		172.18.0.201
	}
}


11. 宿主机安装Keepalived，实现双击热备

#宿主机执行安装Keepalived
yum -y install keepalived
#修改Keepalived配置文件
vi /etc/keepalived/keepalived.conf
#启动Keepalived
service keepalived start

Keepalived配置文件如下：

vrrp_instance VI_1 {
	state MASTER
	interface eth0
	virtual_router_id 51
	priority 100
	advert_int 1
	authentication {
		auth_type PASS
		auth_pass haha
	}
	virtual_ipaddress {
		192.168.3.150
	}
}

virtual_server 192.168.3.150 8888 {
	delay_loop 3
	lb_algo rr
	lb_kind NAT
	persistence_timeout 50
	protocol TCP

	real_server 172.18.0.201 8888 {
		weight 1
	}
}

virtual_server 192.168.3.150 3306 {
	delay_loop 3
	lb_algo rr
	lb_kind NAT
	persistence_timeout 50
	protocol TCP

	real_server 172.18.0.201 3306 {
		weight 1
	}
}
   

12. 热备份数据

#进入node1容器
docker exec -it node1 bash
#更新软件包
apt-get update
#安装热备工具
apt-get install percona-xtrabackup-24
#全量热备
innobackupex --user=root --password=abc123456 /data/backup/full


13. 冷还原数据
停止其余4个节点，并删除节点

```shell
docker stop node2
docker stop node3
docker stop node4
docker stop node5
docker rm node2
docker rm node3
docker rm node4
docker rm node5
```

node1容器中删除MySQL的数据

```shell
#删除数据
rm -rf /var/lib/mysql/*
#清空事务
innobackupex --user=root --password=abc123456 --apply-back /data/backup/full/2018-04-15_05-09-07/
#还原数据
innobackupex --user=root --password=abc123456 --copy-back  /data/backup/full/2018-04-15_05-09-07/
```

重新创建其余4个节点，组件PXC集群